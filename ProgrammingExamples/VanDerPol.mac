/* Ecuacion de Duffing */
/*Ejemplo 2 graficas en 1 sola*/

/*Solucion con la aproximacion Teorica*/
/*Para la ecuacion de Duffing*/
x(t):=a(t)*cos(w0*t+phi(t))+epsilon*u1(t)$
a(t):=2/sqrt(1-alpha*exp(-epsilon*t))$				/*Considero la amplitud constante para Duffing*/
phi(t):=-3*((a(t))^2)/(8*w0)*t*epsilon+phi0$
u1(t):=-((a(t))^3)/(32*(w0^2))*cos(3*(w0*t+phi(t)))$


/*Valor de las constantes*/
w0:1$
epsilon:0.1$

/*Condicones Iniciales*/
a0:1$
alpha:((a0^2)/((a0^2)-4))$
phi0:3*%pi/2$

t0:0$
t1:10$

/*Solucion de Duffing usando metodos numericos - Runge*/
load(diffeq)$
VanDePol(t,x,v):=-(w0^2)*x+epsilon*(1-x^2)*v$
/*Parametros*/

h:0.1$	/*Ancho de la iteracion*/
x0:0$		/*Condicion Inicial de Posicion*/
v0:1$		/*Condicion Inicial de Velocidad*/

/*Se llama a la funcion runge2 para dar solucion al problema.*/
resVanDePol:runge2(VanDePol,t0,t1,h,x0,v0)$

plot2d(
	[	
		[discrete,resVanDePol[1],resVanDePol[2]], /*Grafico de la solucion Numerica*/
		x(t),
		a(t)*cos(w0*t+phi0)
	],
	[t,t0,t1],
	[gnuplot_term, ps],
	[gnuplot_out_file, "/home/hep/Desktop/plot2d.eps"],
	[legend,"Numerico epsilon =0.1","Aprox. Teorica","Sin Perturbar"],
	[xlabel,"Tiempo"], [ylabel,"Posicion"]

)$


/*
plot2d([[discrete,xy], 2*%pi*sqrt(l/980)], [l,0,50],
        [style, [points,5,2,6], [lines,1,1]],
        [legend,"experiment","theory"],
        [xlabel,"pendulum's length (cm)"], [ylabel,"period (s)"])$
*/
